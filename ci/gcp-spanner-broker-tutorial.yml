---
# There are some tasks that just need the broker name
gcp-service-broker-app-name: &gcp-service-broker-app-name
      GCP_SERVICE_BROKER_APP_NAME: gcp-service-broker-ci

# This are the creds used by the broker app when creating the service broker.
gcp-service-broker-app-creds: &gcp-service-broker-app-creds
      SECURITY_USER_NAME: ((security_user_name))
      SECURITY_USER_PASSWORD: ((security_user_password))

# Variable set in the broker manifest
gcp-service-broker-manifest-params: &gcp-service-broker-manifest-params
      <<: *gcp-service-broker-app-name
      <<: *gcp-service-broker-app-creds
      DB_HOST: ((db_host))
      DB_USERNAME: ((db_username))
      DB_PASSWORD: ((db_password))

# The name of the Service Broker created from the app
gcp-service-broker-name: &gcp-service-broker-name
      GCP_SERVICE_BROKER_NAME: gcp-service-broker

# The GCP Spanner service as listed in the CF marketplace
trades-service: &trades-service
      TRADES_SERVICE: google-spanner

# The GCP Spanner service plan
trades-service-plan: &trades-service-plan
      TRADES_SERVICE_PLAN: sandbox

trades-app-name: &trades-app-name
      TRADES_APP_NAME: trades

# The name of the tutorial's GCP Spanner service instance
tutorial-trades-service-instance-name: &tutorial-trades-service-instance-name
      TUTORIAL_TRADES_SERVICE_INSTANCE_NAME: tutorial-trades-service-instance

# Cloud Foundry parameters
cf-params: &cf-params
      CF_API: ((cf_api))
      CF_USER: ((cf_user))
      CF_PWD: ((cf_password))
      CF_ORG: ((cf_org))
      CF_SPACE: ((cf_space))

# Cleanup parameters
clean-params: &cleanup-params
      <<: *cf-params
      <<: *gcp-service-broker-app-name
      <<: *gcp-service-broker-name
      <<: *tutorial-trades-service-instance-name


resources:

- name: cg-customer-broker
  type: git
  source:
    uri: https://github.com/resilientscale/cg-customer-broker.git
    branch: master
    depth: 1

- name: gcp-service-broker
  type: git
  source:
    uri: https://github.com/GoogleCloudPlatform/gcp-service-broker.git
    branch: master
    depth: 1


- name: trades-release
  type: github-release
  source:
    owner: primetimesoftware
    repository: trades
    access_token: ((github_password))

jobs:

# Deploy the service broker as an application
- name: deploy-gcp-service-broker
  serial_groups: [keep-it-simple]
  plan:
  - aggregate:
    - get: cg-customer-broker
    - get: gcp-service-broker
  - task: deploy-gcp-service-broker
    file: cg-customer-broker/ci/tasks/gcp-service-broker-tutorial/deploy-gcp-service-broker.yml
    params:
      << : *cf-params
      << : *gcp-service-broker-manifest-params
      ROOT_SERVICE_ACCOUNT_JSON: ((root_service_account_json))
    on_failure: &cleanup-task
      task: cleanup
      file: cg-customer-broker/ci/tasks/gcp-service-broker-tutorial/cleanup.yml
      params:
        << : *cleanup-params

# Create a service broker using the app deployed above.
- name: create-service-broker
  serial_groups: [keep-it-simple]
  plan:
  - get: cg-customer-broker
    passed: [deploy-gcp-service-broker]
    trigger: true
  - task: create-service-broker
    file: cg-customer-broker/ci/tasks/gcp-service-broker-tutorial/create-service-broker.yml
    params:
      << : *cf-params
      << : *gcp-service-broker-app-name
      << : *gcp-service-broker-app-creds
      << : *gcp-service-broker-name
    on_failure: &cleanup-task
      task: cleanup
      file: cg-customer-broker/ci/tasks/gcp-service-broker-tutorial/cleanup.yml
      params:
        << : *cleanup-params

# Create the GCP spanner service instance which the app will use
- name: create-trades-service-instance
  serial_groups: [keep-it-simple]
  plan:
  - aggregate:
    - get: cg-customer-broker
#      passed: [create-service-broker]
#      trigger: true
  - task: create-trades-service-instance
    file: cg-customer-broker/ci/tasks/gcp-service-broker-tutorial/create-trades-service-instance.yml
    params:
      <<: *cf-params
      <<: *trades-service
      <<: *trades-service-plan
      <<: *tutorial-trades-service-instance-name
    on_failure: &cleanup-task
      task: cleanup
      file: cg-customer-broker/ci/tasks/gcp-service-broker-tutorial/cleanup.yml
      params:
        << : *cleanup-params

# Exercise the GCP Spanner service instance
- name: exercise-trades-service-instance
  serial_groups: [keep-it-simple]
  plan:
  - aggregate:
    - get: cg-customer-broker
    #      passed: [create-trades-service-instance]
    #      trigger: true
    - get: trades-release
      version: { tag: 'latest' }
  - task: exercise-trades-service-instance
    file: cg-customer-broker/ci/tasks/gcp-service-broker-tutorial/exercise-trades-service-instance.yml
    params:
      <<: *cf-params
      <<: *tutorial-trades-service-instance-name
      <<: *trades-app-name
#    on_failure: &cleanup-task
#      task: cleanup
#      file: cg-customer-broker/ci/tasks/gcp-service-broker-tutorial/cleanup.yml
#      params:
#        << : *cleanup-params

# Cleanup all resources created by the pipeline.
#- name: cleanup
#  serial_groups: [keep-it-simple]
#  plan:
#  - get: cg-customer-broker
#    passed: [create-trades-service-instance]
#    trigger: true
#  - task: cleanup
#    file: cg-customer-broker/ci/tasks/gcp-service-broker-tutorial/cleanup.yml
#    params:
#      << : *cleanup-params